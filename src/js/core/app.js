/**
 * Main Application Controller
 * Handles initialization, data loading, and dynamic content rendering
 */

import dataLoader from '../utils/dataLoader.js';

class App {
  constructor() {
    this.isInitialized = false;
    this.currentPage = 'home';
    this.data = {};
  }
  
  /**
   * Initialize the application
   */
  async init() {
    try {
      console.log('🚀 Initializing application...');
      
      // Load all data
      this.data = await dataLoader.init();
      
      // Initialize UI components
      this.initializeMetaTags();
      this.initializeNavigation();
      this.initializeHero();
      this.initializeFooter();
      this.initializeTheme();
      
      // Set up event listeners
      this.setupEventListeners();
      
      // Remove loading state
      document.body.classList.remove('loading');
      
      this.isInitialized = true;
      console.log('✅ Application initialized successfully');
      
    } catch (error) {
      console.error('❌ Failed to initialize application:', error);
      this.showError('Failed to load application data');
    }
  }
  
  /**
   * Initialize meta tags with dynamic data
   */
  initializeMetaTags() {
    const site = this.data.site;
    if (!site) return;
    
    // Update page title
    document.getElementById('page-title').textContent = `${site.name} - ${site.title}`;
    
    // Update meta tags
    this.updateMetaTag('meta-description', 'content', site.description);
    this.updateMetaTag('meta-keywords', 'content', site.seo.keywords.join(', '));
    this.updateMetaTag('meta-author', 'content', site.seo.author);
    \n    // Update Open Graph tags\n    this.updateMetaTag('og-title', 'content', `${site.name} - ${site.title}`);\n    this.updateMetaTag('og-description', 'content', site.description);\n    this.updateMetaTag('og-image', 'content', `${site.urls.domain}${site.urls.images.ogImage}`);\n    this.updateMetaTag('og-url', 'content', site.urls.domain);\n    this.updateMetaTag('og-site-name', 'content', `${site.name} Portfolio`);\n    \n    // Update Twitter Card tags\n    this.updateMetaTag('twitter-title', 'content', `${site.name} - ${site.title}`);\n    this.updateMetaTag('twitter-description', 'content', site.description);\n    this.updateMetaTag('twitter-image', 'content', `${site.urls.domain}${site.urls.images.ogImage}`);\n    this.updateMetaTag('twitter-creator', 'content', site.social.twitter.username);\n    \n    // Update structured data\n    const structuredData = dataLoader.getStructuredData('person');\n    document.getElementById('structured-data').textContent = JSON.stringify(structuredData, null, 2);\n  }\n  \n  /**\n   * Initialize navigation with dynamic data\n   */\n  initializeNavigation() {\n    const nav = this.data.navigation;\n    const site = this.data.site;\n    if (!nav || !site) return;\n    \n    // Update brand text\n    document.getElementById('brand-text').textContent = site.brand.logo.text;\n    \n    // Render navigation items\n    this.renderNavigationItems();\n    \n    // Render navigation actions\n    this.renderNavigationActions();\n  }\n  \n  /**\n   * Render navigation menu items\n   */\n  renderNavigationItems() {\n    const navList = document.getElementById('nav-list');\n    const navItems = dataLoader.getNavigationItems('main');\n    \n    navList.innerHTML = navItems.map(item => `\n      <li>\n        <a href=\"${item.url}\" \n           class=\"nav-link ${item.active ? 'active' : ''}\" \n           data-page=\"${item.id}\"\n           title=\"${item.description}\">\n          <i class=\"${item.icon}\" aria-hidden=\"true\"></i>\n          <span>${item.title}${item.badge ? ` <span class=\"badge\">${item.badge}</span>` : ''}</span>\n        </a>\n      </li>\n    `).join('');\n  }\n  \n  /**\n   * Render navigation actions (theme toggle, etc.)\n   */\n  renderNavigationActions() {\n    const navActions = document.getElementById('nav-actions');\n    const actions = this.data.navigation.actions || [];\n    \n    navActions.innerHTML = actions.map(action => {\n      if (action.type === 'button') {\n        return `\n          <button class=\"${action.id}\" \n                  aria-label=\"${action.title}\" \n                  title=\"${action.title}\"\n                  data-action=\"${action.action}\">\n            <i class=\"${action.icon}\" aria-hidden=\"true\"></i>\n          </button>\n        `;\n      } else if (action.type === 'link') {\n        return `\n          <a href=\"${action.url}\" \n             class=\"btn btn-${action.variant || 'primary'} ${action.mobileHidden ? 'd-none d-md-inline-flex' : ''}\" \n             ${action.external ? 'target=\"_blank\" rel=\"noopener\"' : ''}>\n            <i class=\"${action.icon}\" aria-hidden=\"true\"></i>\n            <span>${action.text}</span>\n          </a>\n        `;\n      }\n      return '';\n    }).join('');\n  }\n  \n  /**\n   * Initialize hero section with dynamic data\n   */\n  initializeHero() {\n    const hero = this.data.hero;\n    if (!hero) return;\n    \n    // Update hero text content\n    document.getElementById('hero-greeting').textContent = hero.greeting;\n    document.getElementById('hero-name').textContent = hero.name;\n    document.getElementById('hero-subtitle').textContent = hero.title;\n    document.getElementById('hero-description').textContent = hero.description;\n    \n    // Update hero image\n    const heroImage = document.getElementById('hero-image');\n    heroImage.src = hero.image.src;\n    heroImage.alt = hero.image.alt;\n    \n    // Update status badge\n    this.updateStatusBadge(hero.status);\n    \n    // Render hero actions\n    this.renderHeroActions(hero.actions);\n    \n    // Render hero stats\n    this.renderHeroStats(hero.stats);\n  }\n  \n  /**\n   * Update status badge\n   */\n  updateStatusBadge(status) {\n    if (!status || !status.show) return;\n    \n    const statusDot = document.getElementById('status-dot');\n    const statusText = document.getElementById('status-text');\n    \n    statusDot.className = `status-dot ${status.type}`;\n    statusText.textContent = status.text;\n  }\n  \n  /**\n   * Render hero action buttons\n   */\n  renderHeroActions(actions) {\n    const heroActions = document.getElementById('hero-actions');\n    if (!actions || !Array.isArray(actions)) return;\n    \n    heroActions.innerHTML = actions\n      .sort((a, b) => (a.order || 0) - (b.order || 0))\n      .map(action => `\n        <a href=\"${action.url}\" \n           class=\"btn btn-${action.variant}\" \n           ${action.external ? 'target=\"_blank\" rel=\"noopener\"' : ''}>\n          <i class=\"${action.icon}\"></i>\n          <span>${action.text}</span>\n        </a>\n      `).join('');\n  }\n  \n  /**\n   * Render hero statistics\n   */\n  renderHeroStats(stats) {\n    const heroStats = document.getElementById('hero-stats');\n    if (!stats || !Array.isArray(stats)) return;\n    \n    heroStats.innerHTML = stats\n      .sort((a, b) => (a.order || 0) - (b.order || 0))\n      .map(stat => `\n        <div class=\"stat\">\n          <span class=\"stat-number\" \n                data-count=\"${stat.number}\"\n                ${stat.countAnimation ? 'data-animate=\"true\"' : ''}>\n            ${stat.countAnimation ? '0' : stat.number}${stat.suffix || ''}\n          </span>\n          <span class=\"stat-label\">${stat.label}</span>\n        </div>\n      `).join('');\n    \n    // Initialize counter animations if needed\n    if (stats.some(stat => stat.countAnimation)) {\n      this.initializeCounterAnimations();\n    }\n  }\n  \n  /**\n   * Initialize footer with dynamic data\n   */\n  initializeFooter() {\n    const site = this.data.site;\n    const nav = this.data.navigation;\n    if (!site) return;\n    \n    this.renderFooterContent();\n    this.renderFooterBottom();\n  }\n  \n  /**\n   * Render footer main content\n   */\n  renderFooterContent() {\n    const footerContent = document.getElementById('footer-content');\n    const site = this.data.site;\n    const nav = this.data.navigation;\n    \n    const socialLinks = Object.entries(site.social).map(([key, social]) => `\n      <a href=\"${social.url}\" \n         target=\"_blank\" \n         rel=\"noopener\" \n         aria-label=\"${key.charAt(0).toUpperCase() + key.slice(1)}\" \n         class=\"btn-social btn-${key}\">\n        <i class=\"${social.icon}\"></i>\n      </a>\n    `).join('');\n    \n    const footerLinks = nav.footer.map(link => `\n      <li><a href=\"${link.url}\">${link.title}</a></li>\n    `).join('');\n    \n    footerContent.innerHTML = `\n      <div class=\"footer-section\">\n        <h3>Connect</h3>\n        <div class=\"social-links\">\n          ${socialLinks}\n        </div>\n      </div>\n      \n      <div class=\"footer-section\">\n        <h3>Quick Links</h3>\n        <ul class=\"footer-links\">\n          ${footerLinks}\n        </ul>\n      </div>\n      \n      <div class=\"footer-section\">\n        <h3>Latest</h3>\n        <div class=\"footer-update\">\n          <p>${site.contact.availability.message}</p>\n          <span class=\"status-indicator ${site.contact.availability.status}\"></span>\n        </div>\n      </div>\n    `;\n  }\n  \n  /**\n   * Render footer bottom\n   */\n  renderFooterBottom() {\n    const footerBottom = document.getElementById('footer-bottom');\n    const site = this.data.site;\n    \n    footerBottom.innerHTML = `\n      <p>${site.legal.copyright}</p>\n      <p>Built with passion and modern web technologies.</p>\n    `;\n  }\n  \n  /**\n   * Initialize theme system\n   */\n  initializeTheme() {\n    // Theme toggle functionality\n    const themeToggle = document.querySelector('.theme-toggle');\n    if (themeToggle) {\n      themeToggle.addEventListener('click', this.toggleTheme.bind(this));\n    }\n    \n    // Set initial theme\n    const savedTheme = localStorage.getItem('portfolio-theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const theme = savedTheme || (prefersDark ? 'dark' : 'light');\n    \n    this.setTheme(theme);\n  }\n  \n  /**\n   * Toggle theme between light and dark\n   */\n  toggleTheme() {\n    const currentTheme = document.documentElement.getAttribute('data-theme');\n    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    this.setTheme(newTheme);\n  }\n  \n  /**\n   * Set theme\n   */\n  setTheme(theme) {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('portfolio-theme', theme);\n    \n    // Update theme toggle icon\n    const themeToggle = document.querySelector('.theme-toggle i');\n    if (themeToggle) {\n      themeToggle.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';\n    }\n  }\n  \n  /**\n   * Initialize counter animations\n   */\n  initializeCounterAnimations() {\n    const counters = document.querySelectorAll('[data-animate=\"true\"]');\n    \n    const animateCounter = (counter) => {\n      const target = parseInt(counter.getAttribute('data-count'));\n      const suffix = counter.textContent.replace(/[0-9]/g, '') || '';\n      let current = 0;\n      const increment = target / 50;\n      \n      const timer = setInterval(() => {\n        current += increment;\n        if (current >= target) {\n          counter.textContent = target + suffix;\n          clearInterval(timer);\n        } else {\n          counter.textContent = Math.floor(current) + suffix;\n        }\n      }, 40);\n    };\n    \n    // Use Intersection Observer to trigger animations when in view\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          animateCounter(entry.target);\n          observer.unobserve(entry.target);\n        }\n      });\n    });\n    \n    counters.forEach(counter => observer.observe(counter));\n  }\n  \n  /**\n   * Set up event listeners\n   */\n  setupEventListeners() {\n    // Navigation click handlers\n    document.addEventListener('click', this.handleNavClick.bind(this));\n    \n    // Mobile menu toggle\n    this.setupMobileMenu();\n    \n    // Scroll effects\n    this.setupScrollEffects();\n    \n    // Form submissions\n    this.setupFormHandlers();\n  }\n  \n  /**\n   * Handle navigation clicks\n   */\n  handleNavClick(event) {\n    const link = event.target.closest('a[data-page]');\n    if (!link) return;\n    \n    event.preventDefault();\n    const page = link.getAttribute('data-page');\n    this.navigateToPage(page);\n  }\n  \n  /**\n   * Navigate to a specific page\n   */\n  navigateToPage(page) {\n    // Update active nav link\n    document.querySelectorAll('.nav-link').forEach(link => {\n      link.classList.remove('active');\n    });\n    \n    const activeLink = document.querySelector(`[data-page=\"${page}\"]`);\n    if (activeLink) {\n      activeLink.classList.add('active');\n    }\n    \n    // Update page content\n    this.loadPageContent(page);\n    this.currentPage = page;\n  }\n  \n  /**\n   * Load page content dynamically\n   */\n  async loadPageContent(page) {\n    const pageContent = document.getElementById('page-content');\n    if (!pageContent) return;\n    \n    // Show loading state\n    pageContent.innerHTML = '<div class=\"loading-spinner\"><div class=\"spinner\"></div><p>Loading...</p></div>';\n    \n    try {\n      // This is where you would load page-specific content\n      // For now, we'll just show a placeholder\n      setTimeout(() => {\n        pageContent.innerHTML = `\n          <div class=\"page-placeholder\">\n            <h2>${page.charAt(0).toUpperCase() + page.slice(1)} Page</h2>\n            <p>Content for the ${page} page will be loaded here.</p>\n          </div>\n        `;\n      }, 500);\n      \n    } catch (error) {\n      console.error(`Error loading ${page} page:`, error);\n      pageContent.innerHTML = '<div class=\"error-message\">Failed to load page content.</div>';\n    }\n  }\n  \n  /**\n   * Setup mobile menu functionality\n   */\n  setupMobileMenu() {\n    const navToggle = document.querySelector('.nav-toggle');\n    const navMenu = document.querySelector('.nav-menu');\n    const navOverlay = document.querySelector('.nav-overlay');\n    \n    if (!navToggle || !navMenu) return;\n    \n    const toggleMenu = () => {\n      const isOpen = navToggle.getAttribute('aria-expanded') === 'true';\n      \n      navToggle.setAttribute('aria-expanded', !isOpen);\n      navMenu.classList.toggle('open', !isOpen);\n      \n      if (navOverlay) {\n        navOverlay.classList.toggle('open', !isOpen);\n      }\n    };\n    \n    navToggle.addEventListener('click', toggleMenu);\n    \n    if (navOverlay) {\n      navOverlay.addEventListener('click', toggleMenu);\n    }\n    \n    // Close menu on nav link click (mobile)\n    navMenu.addEventListener('click', (event) => {\n      if (event.target.classList.contains('nav-link')) {\n        toggleMenu();\n      }\n    });\n  }\n  \n  /**\n   * Setup scroll effects\n   */\n  setupScrollEffects() {\n    let lastScrollY = window.scrollY;\n    const navbar = document.querySelector('.navbar');\n    \n    window.addEventListener('scroll', () => {\n      const currentScrollY = window.scrollY;\n      \n      // Add scrolled class to navbar\n      if (currentScrollY > 50) {\n        navbar?.classList.add('scrolled');\n      } else {\n        navbar?.classList.remove('scrolled');\n      }\n      \n      // Hide/show navbar on scroll\n      if (currentScrollY > lastScrollY && currentScrollY > 100) {\n        navbar?.classList.add('navbar-scroll-hidden');\n      } else {\n        navbar?.classList.remove('navbar-scroll-hidden');\n      }\n      \n      lastScrollY = currentScrollY;\n    });\n  }\n  \n  /**\n   * Setup form handlers\n   */\n  setupFormHandlers() {\n    // This will be expanded when we add contact forms and other forms\n    console.log('Form handlers ready');\n  }\n  \n  /**\n   * Utility method to update meta tag\n   */\n  updateMetaTag(id, attribute, value) {\n    const element = document.getElementById(id);\n    if (element && value) {\n      element.setAttribute(attribute, value);\n    }\n  }\n  \n  /**\n   * Show error message to user\n   */\n  showError(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'error-banner';\n    errorDiv.innerHTML = `\n      <div class=\"error-content\">\n        <i class=\"fas fa-exclamation-triangle\"></i>\n        <span>${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">\n          <i class=\"fas fa-times\"></i>\n        </button>\n      </div>\n    `;\n    \n    document.body.insertBefore(errorDiv, document.body.firstChild);\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      if (errorDiv.parentNode) {\n        errorDiv.remove();\n      }\n    }, 5000);\n  }\n}\n\n// Initialize the application when DOM is ready\nconst app = new App();\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => app.init());\n} else {\n  app.init();\n}\n\n// Export for potential external use\nwindow.App = app;\nexport default app;